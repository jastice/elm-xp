Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Main";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Mouse = Elm.Mouse.make(_elm);
   var Native = Native || {};
   Native.Json = Elm.Native.Json.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var Window = Elm.Window.make(_elm);
   var _op = {};
   var scene = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return A3(Graphics.Collage.collage,
              _v0._0,
              _v0._1,
              _L.fromArray([Graphics.Collage.outlined(Graphics.Collage.solid(Color.blue))(Graphics.Collage.circle(Basics.toFloat(A2(Basics.min,
              _v0._0,
              _v0._1)) / 2))]));}
         _E.Case($moduleName,
         "on line 10, column 15 to 84");
      }();
   };
   var main = A2(Signal._op["<~"],
   scene,
   Window.dimensions);
   _elm.Main.values = {_op: _op
                      ,main: main
                      ,scene: scene};
   return _elm.Main.values;
};